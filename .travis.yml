os: linux
sudo: require

language: generic

services:
  - postgresql

.apt_xenial: &apt_xenial
  update: true
  sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-xenial-7
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # ODB
    - odb
    - libodb-dev
    # SQLite
    - libodb-sqlite-dev
    - libsqlite3-dev
    # PostgreSQL
    - libodb-pgsql-dev
    - postgresql-server-dev-9.5
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - nodejs-legacy
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl-dev
    # Thrift (compile)
    - byacc
    - flex

.apt_bionic: &apt_bionic
  update: true
  packages:
    # Boost
    - libboost-all-dev
    # LLVM/clang
    - llvm-7
    - llvm-7-dev
    - clang-7
    - libclang-7-dev
    # Java
    - default-jdk
    # ODB
    - gcc-7-plugin-dev
    # SQLite
    - libsqlite3-dev
    # PostgreSQL
    - postgresql-server-dev-10
    # Parser
    - libmagic-dev
    - libgit2-dev
    - ctags
    # Service
    - libgraphviz-dev
    - npm
    # GTest
    - libgtest-dev
    # Thrift
    - libssl1.0-dev
    # Thrift (compile)
    - byacc
    - flex

.install_odb: &install_odb
  |
  if [ ! -f "$HOME/build2_install/bin/bpkg" ]; then
    mkdir /tmp/build2src
    cd /tmp/build2src
    curl -sSfO https://download.build2.org/0.12.0/build2-install-0.12.0.sh
    sh build2-install-0.12.0.sh --yes --trust yes "$HOME/build2_install/"
  fi
  export PATH=$PATH:$HOME/build2_install/bin/
  if [ ! -f "$HOME/odb_install/bin/odb" ]; then
    mkdir /tmp/odb_build
    cd /tmp/odb_build
    bpkg create --quiet --jobs $(nproc) cc \
    config.cxx=g++ config.cc.coptions=-O3 \
    config.bin.rpath="$HOME/odb_install/lib" config.install.root="$HOME/odb_install" \
    config.install.sudo=sudo
    bpkg add https://pkg.cppget.org/1/beta --trust-yes
    bpkg fetch --trust-yes
    bpkg build odb --yes
    bpkg build libodb --yes
    bpkg build libodb-sqlite --yes
    bpkg build libodb-pgsql --yes
    bpkg install --all --recursive
  fi

.install_thrift: &install_thrift
  |
  if [ ! -f "$HOME/thrift_install/bin/thrift" ]; then
    cd $HOME
    wget -O thrift-0.13.0.tar.gz "http://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=thrift/0.13.0/thrift-0.13.0.tar.gz"
    tar -xvf ./thrift-0.13.0.tar.gz
    cd thrift-0.13.0
    ./configure --prefix=$HOME/thrift_install --without-python       \
    --enable-libtool-lock --enable-tutorial=no --enable-tests=no     \
    --with-libevent --with-zlib --without-nodejs --without-lua       \
    --without-ruby --without-csharp --without-erlang --without-perl  \
    --without-php --without-php_extension --without-dart             \
    --without-haskell --without-go --without-rs --without-haxe       \
    --without-dotnetcore --without-d --without-qt4 --without-qt5
    make install
  fi

.install_gtest_xenial: &install_gtest_xenial
  |
  if [ ! -f "$HOME/gtest_install/lib/libgtest.a" ]; then
    cd $HOME
    mkdir gtest
    cp -R /usr/src/gtest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest_install
    make

    mkdir -p $HOME/gtest_install/lib
    cp libgtest.a libgtest_main.a $HOME/gtest_install/lib/
  fi

.install_gtest_bionic: &install_gtest_bionic
  |
  if [ ! -f "$HOME/gtest_install/lib/libgtest.a" ]; then
    cd $HOME
    mkdir gtest
    cp -R /usr/src/googletest/* ./gtest
    cd gtest
    mkdir build && cd build
    cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/gtest_install
    make install
  fi

before_script:
  # Default locations and versions
  - which cmake g++ clang llvm-config javac
  - cmake --version
  - g++ --version
  - clang --version
  - llvm-config --version --has-rtti
  - javac -version
  # LLVM/Clang test from package install
  - /usr/bin/clang-7 --version
  - /usr/bin/llvm-config-7 --version --has-rtti
  # ODB
  - export CMAKE_PREFIX_PATH=$HOME/odb_install:$CMAKE_PREFIX_PATH
  - export PATH=$HOME/odb_install/bin:$PATH
  - odb --version
  # Thrift
  - export CMAKE_PREFIX_PATH=$HOME/thrift_install:$CMAKE_PREFIX_PATH
  - export PATH=$HOME/thrift_install/bin:$PATH
  - thrift --version
  # GTest
  - export GTEST_ROOT=$HOME/gtest_install

.build_postgres: &build_postgres
  - cd $TRAVIS_BUILD_DIR
  - mkdir build_pgsql && cd build_pgsql
  - >
    cmake ..
    -DDATABASE=pgsql
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/install_pgsql
    -DTEST_DB="pgsql:host=localhost;port=5432;user=postgres;password=;database=cc_test"
    -DLLVM_DIR=/usr/lib/llvm-7/cmake
    -DClang_DIR:PATH=/usr/lib/cmake/clang-7
  - make install
  - make test ARGS=-V

.build_sqlite: &build_sqlite
  - cd $TRAVIS_BUILD_DIR
  - mkdir build_sqlite && cd build_sqlite
  - >
    cmake ..
    -DDATABASE=sqlite
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/install_sqlite
    -DTEST_DB="sqlite:database=$HOME/cc_test.sqlite"
    -DLLVM_DIR=/usr/lib/llvm-7/cmake
    -DClang_DIR:PATH=/usr/lib/cmake/clang-7
  - make install
  - make test ARGS=-V

jobs:
  include:
    - name: "Xenial PostgreSQL build"
      dist: xenial
      addons:
        apt:
          <<: *apt_xenial
        postgresql: "9.5"
      install:
        - *install_thrift
        - *install_gtest_xenial
      script:
        *build_postgres
    - name: "Xenial SQLite build"
      dist: xenial
      addons:
        apt:
          <<: *apt_xenial
        postgresql: "9.5"
      install:
        - *install_thrift
        - *install_gtest_xenial
      script:
        *build_sqlite
    - name: "Bionic PostgreSQL build"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic
        postgresql: "10"
      install:
        - *install_odb
        - *install_thrift
        - *install_gtest_bionic
      script:
        *build_postgres
    - name: "Bionic SQLite build"
      dist: bionic
      addons:
        apt:
          <<: *apt_bionic
        postgresql: "10"
      install:
        - *install_odb
        - *install_thrift
        - *install_gtest_bionic
      script:
        *build_sqlite

cache:
  directories:
    - $HOME/thrift_install
    - $HOME/gtest_install
    - $HOME/build2_install
    - $HOME/odb_install

