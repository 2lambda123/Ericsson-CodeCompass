/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class FilePosition : TBase
{
  private string _file;
  private Position _pos;

  public string File
  {
    get
    {
      return _file;
    }
    set
    {
      __isset.file = true;
      this._file = value;
    }
  }

  public Position Pos
  {
    get
    {
      return _pos;
    }
    set
    {
      __isset.pos = true;
      this._pos = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool file;
    public bool pos;
  }

  public FilePosition()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              File = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              Pos = new Position();
              await Pos.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("FilePosition");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (File != null && __isset.file)
      {
        field.Name = "file";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(File, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Pos != null && __isset.pos)
      {
        field.Name = "pos";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Pos.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as FilePosition;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.file == other.__isset.file) && ((!__isset.file) || (System.Object.Equals(File, other.File))))
      && ((__isset.pos == other.__isset.pos) && ((!__isset.pos) || (System.Object.Equals(Pos, other.Pos))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.file)
        hashcode = (hashcode * 397) + File.GetHashCode();
      if(__isset.pos)
        hashcode = (hashcode * 397) + Pos.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("FilePosition(");
    bool __first = true;
    if (File != null && __isset.file)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("File: ");
      sb.Append(File);
    }
    if (Pos != null && __isset.pos)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Pos: ");
      sb.Append(Pos== null ? "<null>" : Pos.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

