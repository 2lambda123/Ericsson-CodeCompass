/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace language
{

  public partial class AstNodeInfo : TBase
  {
    private string _id;
    private long _entityHash;
    private string _astNodeType;
    private string _symbolType;
    private string _astNodeValue;
    private FileRange _range;
    private List<string> _tags;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// Unique id of the AST node for the whole workspace.
    /// </summary>
    public long EntityHash
    {
      get
      {
        return _entityHash;
      }
      set
      {
        __isset.entityHash = true;
        this._entityHash = value;
      }
    }

    /// <summary>
    /// To resolve unique names of the AST node.
    /// </summary>
    public string AstNodeType
    {
      get
      {
        return _astNodeType;
      }
      set
      {
        __isset.astNodeType = true;
        this._astNodeType = value;
      }
    }

    /// <summary>
    /// String representation of AST type (e.g. Statement/Declaration/Usage).
    /// </summary>
    public string SymbolType
    {
      get
      {
        return _symbolType;
      }
      set
      {
        __isset.symbolType = true;
        this._symbolType = value;
      }
    }

    /// <summary>
    /// String representation of Symbol type (e.g. Function/Type/Variable).
    /// </summary>
    public string AstNodeValue
    {
      get
      {
        return _astNodeValue;
      }
      set
      {
        __isset.astNodeValue = true;
        this._astNodeValue = value;
      }
    }

    /// <summary>
    /// String representation of an AST node.
    /// </summary>
    public FileRange Range
    {
      get
      {
        return _range;
      }
      set
      {
        __isset.range = true;
        this._range = value;
      }
    }

    /// <summary>
    /// Source code range of an AST node.
    /// </summary>
    public List<string> Tags
    {
      get
      {
        return _tags;
      }
      set
      {
        __isset.tags = true;
        this._tags = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool id;
      public bool entityHash;
      public bool astNodeType;
      public bool symbolType;
      public bool astNodeValue;
      public bool range;
      public bool tags;
    }

    public AstNodeInfo()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Id = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                EntityHash = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                AstNodeType = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                SymbolType = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                AstNodeValue = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                Range = new FileRange();
                await Range.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.List)
              {
                {
                  TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                  Tags = new List<string>(_list0.Count);
                  for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = await iprot.ReadStringAsync(cancellationToken);
                    Tags.Add(_elem2);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("AstNodeInfo");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Id != null && __isset.id)
        {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Id, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.entityHash)
        {
          field.Name = "entityHash";
          field.Type = TType.I64;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(EntityHash, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (AstNodeType != null && __isset.astNodeType)
        {
          field.Name = "astNodeType";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(AstNodeType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (SymbolType != null && __isset.symbolType)
        {
          field.Name = "symbolType";
          field.Type = TType.String;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(SymbolType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (AstNodeValue != null && __isset.astNodeValue)
        {
          field.Name = "astNodeValue";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(AstNodeValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Range != null && __isset.range)
        {
          field.Name = "range";
          field.Type = TType.Struct;
          field.ID = 6;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Range.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Tags != null && __isset.tags)
        {
          field.Name = "tags";
          field.Type = TType.List;
          field.ID = 7;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, Tags.Count), cancellationToken);
            foreach (string _iter3 in Tags)
            {
              await oprot.WriteStringAsync(_iter3, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as AstNodeInfo;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
        && ((__isset.entityHash == other.__isset.entityHash) && ((!__isset.entityHash) || (System.Object.Equals(EntityHash, other.EntityHash))))
        && ((__isset.astNodeType == other.__isset.astNodeType) && ((!__isset.astNodeType) || (System.Object.Equals(AstNodeType, other.AstNodeType))))
        && ((__isset.symbolType == other.__isset.symbolType) && ((!__isset.symbolType) || (System.Object.Equals(SymbolType, other.SymbolType))))
        && ((__isset.astNodeValue == other.__isset.astNodeValue) && ((!__isset.astNodeValue) || (System.Object.Equals(AstNodeValue, other.AstNodeValue))))
        && ((__isset.range == other.__isset.range) && ((!__isset.range) || (System.Object.Equals(Range, other.Range))))
        && ((__isset.tags == other.__isset.tags) && ((!__isset.tags) || (TCollections.Equals(Tags, other.Tags))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.id)
          hashcode = (hashcode * 397) + Id.GetHashCode();
        if(__isset.entityHash)
          hashcode = (hashcode * 397) + EntityHash.GetHashCode();
        if(__isset.astNodeType)
          hashcode = (hashcode * 397) + AstNodeType.GetHashCode();
        if(__isset.symbolType)
          hashcode = (hashcode * 397) + SymbolType.GetHashCode();
        if(__isset.astNodeValue)
          hashcode = (hashcode * 397) + AstNodeValue.GetHashCode();
        if(__isset.range)
          hashcode = (hashcode * 397) + Range.GetHashCode();
        if(__isset.tags)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Tags);
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("AstNodeInfo(");
      bool __first = true;
      if (Id != null && __isset.id)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Id: ");
        sb.Append(Id);
      }
      if (__isset.entityHash)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("EntityHash: ");
        sb.Append(EntityHash);
      }
      if (AstNodeType != null && __isset.astNodeType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AstNodeType: ");
        sb.Append(AstNodeType);
      }
      if (SymbolType != null && __isset.symbolType)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SymbolType: ");
        sb.Append(SymbolType);
      }
      if (AstNodeValue != null && __isset.astNodeValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("AstNodeValue: ");
        sb.Append(AstNodeValue);
      }
      if (Range != null && __isset.range)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Range: ");
        sb.Append(Range== null ? "<null>" : Range.ToString());
      }
      if (Tags != null && __isset.tags)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Tags: ");
        sb.Append(Tags);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
