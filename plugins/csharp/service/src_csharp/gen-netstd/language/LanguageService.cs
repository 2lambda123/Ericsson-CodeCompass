/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace language
{
  public partial class LanguageService
  {
    /// <summary>
    /// CSS class name
    /// </summary>
    public interface IAsync
    {
      /// <summary>
      /// Return the file types which can be used to associate
      /// the file types with the service
      /// @return File types
      /// </summary>
      Task<List<string>> getFileTypesAsync(CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns an AstNodeInfo object for the given AST node ID.
      /// @param astNodeId ID of an AST node.
      /// @return The corresponding AstNodeInfo object.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeId"></param>
      Task<AstNodeInfo> getAstNodeInfoAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns an AstNodeInfo object for the given source code position.
      /// @param fpos File position in the source file.
      /// @return The AstNodeInfo object at the given position. If more AST nodes are
      /// found at the given position nested in each other (e.g. in a compound
      /// expression) then the innermost is returned.
      /// @exception common.InvalidInput Exception is thrown if no AST node found
      /// at the given position.
      /// </summary>
      /// <param name="fpos"></param>
      Task<AstNodeInfo> getAstNodeInfoByPositionAsync(FilePosition fpos, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the source code text that corresponds to the given AST node.
      /// @param astNodeId ID of an AST node.
      /// @return The source text as a verbatim string.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeId"></param>
      Task<string> getSourceTextAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the documentation which belongs to the given AST node if any
      /// (Doxygen, Python doc, etc.).
      /// @param astNodeId ID of an AST node.
      /// @return The documentation of the given node.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeId"></param>
      Task<string> getDocumentationAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns a set of properties which can be known about the given AST node.
      /// @param astNodeId ID of an AST node.
      /// @return A collection which maps the property name to the property value.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeIds"></param>
      Task<Dictionary<string, string>> getPropertiesAsync(string astNodeIds, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the diagram types which can be passed to getDiagram() function for
      /// the given AST node.
      /// @param astNodeId ID of an AST node.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeId"></param>
      Task<Dictionary<string, int>> getDiagramTypesAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the SVG represenation of a diagram about the AST node identified by
      /// astNodeId and diagarm type identified by diagramId.
      /// @param astNodeId The AST node we want to draw diagram about.
      /// @param diagramId The diagram type we want to draw. The diagram types can be
      /// queried by getDiagramTypes().
      /// @return SVG represenation of the diagram. If the diagram can't be generated
      /// then empty string returns.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// @exception common.Timeout Exception is thrown if the diagram generation
      /// times out.
      /// </summary>
      /// <param name="astNodeId"></param>
      /// <param name="diagramId"></param>
      Task<string> getDiagramAsync(string astNodeId, int diagramId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the SVG represenation of the diagram legend used by getDiagram().
      /// @param diagramId The diagram type. This should be one of the IDs returned
      /// by getDiagramTypes().
      /// @return SVG represenation of the diagram legend or empty string if the
      /// legend can't be generated.
      /// </summary>
      /// <param name="diagramId"></param>
      Task<string> getDiagramLegendAsync(int diagramId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns a list of diagram types that can be drawn for the specified file.
      /// @param fileId The file ID we would like to draw the diagram about.
      /// @return List of supported diagram types (such as dependency).
      /// @exception common.InvalidId Exception is thrown if no file belongs to the
      /// given ID.
      /// </summary>
      /// <param name="fileId"></param>
      Task<Dictionary<string, int>> getFileDiagramTypesAsync(string fileId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns an SVG representation of the required diagram graph.
      /// @param fileId The file ID we would like to draw the diagram aboue.
      /// @param diagramId The diagram type we want to draw. These can be queried by
      /// getFileDiagramTypes().
      /// @return SVG represenation of the diagram.
      /// @exception common.InvalidId Exception is thrown if no ID belongs to the
      /// given fileId.
      /// @exception common.Timeout Exception is thrown if the diagram generation
      /// times out.
      /// </summary>
      /// <param name="fileId"></param>
      /// <param name="diagramId"></param>
      Task<string> getFileDiagramAsync(string fileId, int diagramId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the SVG represenation of the diagram legend used by
      /// getFileDiagram().
      /// @param diagramId The diagram type. This should be one of the IDs returned
      /// by getFileDiagramTypes().
      /// @return SVG represenation of the diagram legend or empty string if the
      /// legend can't be generated.
      /// </summary>
      /// <param name="diagramId"></param>
      Task<string> getFileDiagramLegendAsync(int diagramId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the reference types which can be passed to getReferences().
      /// @param astNodeId ID of an AST node.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeId"></param>
      Task<Dictionary<string, int>> getReferenceTypesAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns reference count to the AST node identified by astNodeId.
      /// @param astNodeId The AST node to be queried.
      /// @param referenceId Reference type (such as derivedClasses, definition,
      /// usages etc.). Possible values can be queried by getReferenceTypes().
      /// @return Number of rereferences
      /// </summary>
      /// <param name="astNodeId"></param>
      /// <param name="referenceId"></param>
      Task<int> getReferenceCountAsync(string astNodeId, int referenceId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns references to the AST node identified by astNodeId.
      /// @param astNodeId The AST node to be queried.
      /// @param referenceId Reference type (such as derivedClasses, definition,
      /// usages etc.). Possible values can be queried by getReferenceTypes().
      /// @param tags Meta-information which can help to filter query results of
      /// the AST node (e.g. public, static)
      /// @return List of references.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeId"></param>
      /// <param name="referenceId"></param>
      /// <param name="tags"></param>
      Task<List<AstNodeInfo>> getReferencesAsync(string astNodeId, int referenceId, List<string> tags, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns references to the AST node identified by astNodeId restricted to a
      /// given file. Sometimes (e.g. in a GUI) it is sufficient to list only the
      /// results in a file, and this may make the implementation faster.
      /// @param astNodeId The astNode to be queried.
      /// @param referenceId reference type (such as derivedClasses, definition,
      /// usages etc.).
      /// @param fileId ID of the file in which we search for the references.
      /// @param tags Meta-information which can help to filter query results of
      /// the AST node (e.g. public, static)
      /// @return List of references.
      /// @exception common.InvalidId Exception is thrown if not AST node or file
      /// belongs to the given IDs.
      /// </summary>
      /// <param name="astNodeId"></param>
      /// <param name="referenceId"></param>
      /// <param name="fileId"></param>
      /// <param name="tags"></param>
      Task<List<AstNodeInfo>> getReferencesInFileAsync(string astNodeId, int referenceId, string fileId, List<string> tags, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Same as getReferences() but only a few results are returned based on the
      /// parameters.
      /// @param astNodeId The AST node to be queried.
      /// @param referenceId Reference type (such as derivedClasses, definition,
      /// usages etc.). Possible values can be queried by getReferenceTypes().
      /// @param pageSize The maximum size of the returned list.
      /// @param pageNo The number of the page to display, starting from 0.
      /// @return List of references.
      /// @exception common.InvalidId Exception is thrown if no AST node belongs to
      /// the given ID.
      /// </summary>
      /// <param name="astNodeId"></param>
      /// <param name="referenceId"></param>
      /// <param name="pageSize"></param>
      /// <param name="pageNo"></param>
      Task<List<AstNodeInfo>> getReferencesPageAsync(string astNodeId, int referenceId, int pageSize, int pageNo, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns a list of reference types that can be listed for the requested file
      /// (such as includes, included by, etc.).
      /// @param fileId The file ID we want to get the references about.
      /// @return List of supported reference types.
      /// @exception common.InvalidId Exception is thrown if no file belongs to the
      /// given ID.
      /// </summary>
      /// <param name="fileId"></param>
      Task<Dictionary<string, int>> getFileReferenceTypesAsync(string fileId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns references as an answer to the requested search.
      /// @param fileId the file ID we want to get the references about.
      /// @param referenceType Reference type (e.g. includes, provides, etc.).
      /// Possible values can be queried by getFileReferenceTypes().
      /// @return List of references.
      /// @exception common.InvalidId Exception is thrown if no file belongs to the
      /// given ID.
      /// </summary>
      /// <param name="fileId"></param>
      /// <param name="referenceId"></param>
      Task<List<AstNodeInfo>> getFileReferencesAsync(string fileId, int referenceId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns reference count to the File node identified by fileId.
      /// @param fileId The file ID we want to get the references count about.
      /// @param referenceId Reference type (such as includes, functions, macros,
      /// files etc.). Possible values can be queried by getFileReferenceTypes().
      /// @return Number of references.
      /// </summary>
      /// <param name="fileId"></param>
      /// <param name="referenceId"></param>
      Task<int> getFileReferenceCountAsync(string fileId, int referenceId, CancellationToken cancellationToken = default(CancellationToken));

      /// <summary>
      /// Returns the syntax highlight elements for a whole file.
      /// @param fileRange The range of the file
      /// @return Elements' position and CSS class name.
      /// @exception common.InvalidId Exception is thrown if no file belongs to the
      /// given ID.
      /// </summary>
      /// <param name="range"></param>
      Task<List<SyntaxHighlight>> getSyntaxHighlightAsync(FileRange range, CancellationToken cancellationToken = default(CancellationToken));

    }


    /// <summary>
    /// CSS class name
    /// </summary>
    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async Task<List<string>> getFileTypesAsync(CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFileTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getFileTypesArgs();
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getFileTypesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileTypes failed: unknown result");
      }

      public async Task<AstNodeInfo> getAstNodeInfoAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getAstNodeInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getAstNodeInfoArgs();
        args.AstNodeId = astNodeId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getAstNodeInfoResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAstNodeInfo failed: unknown result");
      }

      public async Task<AstNodeInfo> getAstNodeInfoByPositionAsync(FilePosition fpos, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getAstNodeInfoByPosition", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getAstNodeInfoByPositionArgs();
        args.Fpos = fpos;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getAstNodeInfoByPositionResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAstNodeInfoByPosition failed: unknown result");
      }

      public async Task<string> getSourceTextAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSourceText", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getSourceTextArgs();
        args.AstNodeId = astNodeId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getSourceTextResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSourceText failed: unknown result");
      }

      public async Task<string> getDocumentationAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getDocumentation", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getDocumentationArgs();
        args.AstNodeId = astNodeId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getDocumentationResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDocumentation failed: unknown result");
      }

      public async Task<Dictionary<string, string>> getPropertiesAsync(string astNodeIds, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getProperties", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getPropertiesArgs();
        args.AstNodeIds = astNodeIds;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getPropertiesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProperties failed: unknown result");
      }

      public async Task<Dictionary<string, int>> getDiagramTypesAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getDiagramTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getDiagramTypesArgs();
        args.AstNodeId = astNodeId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getDiagramTypesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDiagramTypes failed: unknown result");
      }

      public async Task<string> getDiagramAsync(string astNodeId, int diagramId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getDiagram", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getDiagramArgs();
        args.AstNodeId = astNodeId;
        args.DiagramId = diagramId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getDiagramResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.exId)
        {
          throw result.ExId;
        }
        if (result.__isset.exLong)
        {
          throw result.ExLong;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDiagram failed: unknown result");
      }

      public async Task<string> getDiagramLegendAsync(int diagramId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getDiagramLegend", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getDiagramLegendArgs();
        args.DiagramId = diagramId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getDiagramLegendResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDiagramLegend failed: unknown result");
      }

      public async Task<Dictionary<string, int>> getFileDiagramTypesAsync(string fileId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFileDiagramTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getFileDiagramTypesArgs();
        args.FileId = fileId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getFileDiagramTypesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileDiagramTypes failed: unknown result");
      }

      public async Task<string> getFileDiagramAsync(string fileId, int diagramId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFileDiagram", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getFileDiagramArgs();
        args.FileId = fileId;
        args.DiagramId = diagramId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getFileDiagramResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.exId)
        {
          throw result.ExId;
        }
        if (result.__isset.exLong)
        {
          throw result.ExLong;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileDiagram failed: unknown result");
      }

      public async Task<string> getFileDiagramLegendAsync(int diagramId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFileDiagramLegend", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getFileDiagramLegendArgs();
        args.DiagramId = diagramId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getFileDiagramLegendResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileDiagramLegend failed: unknown result");
      }

      public async Task<Dictionary<string, int>> getReferenceTypesAsync(string astNodeId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getReferenceTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getReferenceTypesArgs();
        args.AstNodeId = astNodeId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getReferenceTypesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferenceTypes failed: unknown result");
      }

      public async Task<int> getReferenceCountAsync(string astNodeId, int referenceId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getReferenceCount", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getReferenceCountArgs();
        args.AstNodeId = astNodeId;
        args.ReferenceId = referenceId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getReferenceCountResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferenceCount failed: unknown result");
      }

      public async Task<List<AstNodeInfo>> getReferencesAsync(string astNodeId, int referenceId, List<string> tags, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getReferences", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getReferencesArgs();
        args.AstNodeId = astNodeId;
        args.ReferenceId = referenceId;
        args.Tags = tags;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getReferencesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferences failed: unknown result");
      }

      public async Task<List<AstNodeInfo>> getReferencesInFileAsync(string astNodeId, int referenceId, string fileId, List<string> tags, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getReferencesInFile", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getReferencesInFileArgs();
        args.AstNodeId = astNodeId;
        args.ReferenceId = referenceId;
        args.FileId = fileId;
        args.Tags = tags;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getReferencesInFileResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferencesInFile failed: unknown result");
      }

      public async Task<List<AstNodeInfo>> getReferencesPageAsync(string astNodeId, int referenceId, int pageSize, int pageNo, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getReferencesPage", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getReferencesPageArgs();
        args.AstNodeId = astNodeId;
        args.ReferenceId = referenceId;
        args.PageSize = pageSize;
        args.PageNo = pageNo;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getReferencesPageResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReferencesPage failed: unknown result");
      }

      public async Task<Dictionary<string, int>> getFileReferenceTypesAsync(string fileId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFileReferenceTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getFileReferenceTypesArgs();
        args.FileId = fileId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getFileReferenceTypesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileReferenceTypes failed: unknown result");
      }

      public async Task<List<AstNodeInfo>> getFileReferencesAsync(string fileId, int referenceId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFileReferences", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getFileReferencesArgs();
        args.FileId = fileId;
        args.ReferenceId = referenceId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getFileReferencesResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileReferences failed: unknown result");
      }

      public async Task<int> getFileReferenceCountAsync(string fileId, int referenceId, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getFileReferenceCount", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getFileReferenceCountArgs();
        args.FileId = fileId;
        args.ReferenceId = referenceId;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getFileReferenceCountResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileReferenceCount failed: unknown result");
      }

      public async Task<List<SyntaxHighlight>> getSyntaxHighlightAsync(FileRange range, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSyntaxHighlight", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getSyntaxHighlightArgs();
        args.Range = range;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getSyntaxHighlightResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        if (result.__isset.ex)
        {
          throw result.Ex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSyntaxHighlight failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private IAsync _iAsync;

      public AsyncProcessor(IAsync iAsync)
      {
        if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

        _iAsync = iAsync;
        processMap_["getFileTypes"] = getFileTypes_ProcessAsync;
        processMap_["getAstNodeInfo"] = getAstNodeInfo_ProcessAsync;
        processMap_["getAstNodeInfoByPosition"] = getAstNodeInfoByPosition_ProcessAsync;
        processMap_["getSourceText"] = getSourceText_ProcessAsync;
        processMap_["getDocumentation"] = getDocumentation_ProcessAsync;
        processMap_["getProperties"] = getProperties_ProcessAsync;
        processMap_["getDiagramTypes"] = getDiagramTypes_ProcessAsync;
        processMap_["getDiagram"] = getDiagram_ProcessAsync;
        processMap_["getDiagramLegend"] = getDiagramLegend_ProcessAsync;
        processMap_["getFileDiagramTypes"] = getFileDiagramTypes_ProcessAsync;
        processMap_["getFileDiagram"] = getFileDiagram_ProcessAsync;
        processMap_["getFileDiagramLegend"] = getFileDiagramLegend_ProcessAsync;
        processMap_["getReferenceTypes"] = getReferenceTypes_ProcessAsync;
        processMap_["getReferenceCount"] = getReferenceCount_ProcessAsync;
        processMap_["getReferences"] = getReferences_ProcessAsync;
        processMap_["getReferencesInFile"] = getReferencesInFile_ProcessAsync;
        processMap_["getReferencesPage"] = getReferencesPage_ProcessAsync;
        processMap_["getFileReferenceTypes"] = getFileReferenceTypes_ProcessAsync;
        processMap_["getFileReferences"] = getFileReferences_ProcessAsync;
        processMap_["getFileReferenceCount"] = getFileReferenceCount_ProcessAsync;
        processMap_["getSyntaxHighlight"] = getSyntaxHighlight_ProcessAsync;
      }

      protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async Task getFileTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getFileTypesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getFileTypesResult();
        try
        {
          result.Success = await _iAsync.getFileTypesAsync(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getFileTypes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFileTypes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getAstNodeInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getAstNodeInfoArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getAstNodeInfoResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getAstNodeInfoAsync(args.AstNodeId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getAstNodeInfo", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getAstNodeInfo", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getAstNodeInfoByPosition_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getAstNodeInfoByPositionArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getAstNodeInfoByPositionResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getAstNodeInfoByPositionAsync(args.Fpos, cancellationToken);
          }
          catch (InvalidInput ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getAstNodeInfoByPosition", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getAstNodeInfoByPosition", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getSourceText_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getSourceTextArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getSourceTextResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getSourceTextAsync(args.AstNodeId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getSourceText", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSourceText", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getDocumentation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getDocumentationArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getDocumentationResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getDocumentationAsync(args.AstNodeId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getDocumentation", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getDocumentation", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getProperties_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getPropertiesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getPropertiesResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getPropertiesAsync(args.AstNodeIds, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getProperties", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getProperties", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getDiagramTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getDiagramTypesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getDiagramTypesResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getDiagramTypesAsync(args.AstNodeId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getDiagramTypes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getDiagramTypes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getDiagram_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getDiagramArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getDiagramResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getDiagramAsync(args.AstNodeId, args.DiagramId, cancellationToken);
          }
          catch (InvalidId exId)
          {
            result.ExId = exId;
          }
          catch (Timeout exLong)
          {
            result.ExLong = exLong;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getDiagram", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getDiagram", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getDiagramLegend_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getDiagramLegendArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getDiagramLegendResult();
        try
        {
          result.Success = await _iAsync.getDiagramLegendAsync(args.DiagramId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getDiagramLegend", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getDiagramLegend", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getFileDiagramTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getFileDiagramTypesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getFileDiagramTypesResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getFileDiagramTypesAsync(args.FileId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getFileDiagramTypes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFileDiagramTypes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getFileDiagram_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getFileDiagramArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getFileDiagramResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getFileDiagramAsync(args.FileId, args.DiagramId, cancellationToken);
          }
          catch (InvalidId exId)
          {
            result.ExId = exId;
          }
          catch (Timeout exLong)
          {
            result.ExLong = exLong;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getFileDiagram", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFileDiagram", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getFileDiagramLegend_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getFileDiagramLegendArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getFileDiagramLegendResult();
        try
        {
          result.Success = await _iAsync.getFileDiagramLegendAsync(args.DiagramId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getFileDiagramLegend", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFileDiagramLegend", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getReferenceTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getReferenceTypesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getReferenceTypesResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getReferenceTypesAsync(args.AstNodeId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getReferenceTypes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getReferenceTypes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getReferenceCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getReferenceCountArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getReferenceCountResult();
        try
        {
          result.Success = await _iAsync.getReferenceCountAsync(args.AstNodeId, args.ReferenceId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getReferenceCount", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getReferenceCount", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getReferences_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getReferencesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getReferencesResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getReferencesAsync(args.AstNodeId, args.ReferenceId, args.Tags, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getReferences", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getReferences", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getReferencesInFile_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getReferencesInFileArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getReferencesInFileResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getReferencesInFileAsync(args.AstNodeId, args.ReferenceId, args.FileId, args.Tags, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getReferencesInFile", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getReferencesInFile", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getReferencesPage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getReferencesPageArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getReferencesPageResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getReferencesPageAsync(args.AstNodeId, args.ReferenceId, args.PageSize, args.PageNo, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getReferencesPage", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getReferencesPage", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getFileReferenceTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getFileReferenceTypesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getFileReferenceTypesResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getFileReferenceTypesAsync(args.FileId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getFileReferenceTypes", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFileReferenceTypes", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getFileReferences_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getFileReferencesArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getFileReferencesResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getFileReferencesAsync(args.FileId, args.ReferenceId, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getFileReferences", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFileReferences", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getFileReferenceCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getFileReferenceCountArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getFileReferenceCountResult();
        try
        {
          result.Success = await _iAsync.getFileReferenceCountAsync(args.FileId, args.ReferenceId, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getFileReferenceCount", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getFileReferenceCount", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getSyntaxHighlight_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getSyntaxHighlightArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getSyntaxHighlightResult();
        try
        {
          try
          {
            result.Success = await _iAsync.getSyntaxHighlightAsync(args.Range, cancellationToken);
          }
          catch (InvalidId ex)
          {
            result.Ex = ex;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("getSyntaxHighlight", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSyntaxHighlight", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }


    public partial class getFileTypesArgs : TBase
    {

      public getFileTypesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileTypes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileTypesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileTypes_args(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileTypesResult : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getFileTypesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list4 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<string>(_list4.Count);
                    for(int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      string _elem6;
                      _elem6 = await iprot.ReadStringAsync(cancellationToken);
                      Success.Add(_elem6);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileTypes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter7 in Success)
                {
                  await oprot.WriteStringAsync(_iter7, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileTypesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileTypes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getAstNodeInfoArgs : TBase
    {
      private string _astNodeId;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
      }

      public getAstNodeInfoArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getAstNodeInfo_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getAstNodeInfoArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getAstNodeInfo_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getAstNodeInfoResult : TBase
    {
      private AstNodeInfo _success;
      private InvalidId _ex;

      public AstNodeInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getAstNodeInfoResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new AstNodeInfo();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getAstNodeInfo_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getAstNodeInfoResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getAstNodeInfo_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getAstNodeInfoByPositionArgs : TBase
    {
      private FilePosition _fpos;

      public FilePosition Fpos
      {
        get
        {
          return _fpos;
        }
        set
        {
          __isset.fpos = true;
          this._fpos = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool fpos;
      }

      public getAstNodeInfoByPositionArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Fpos = new FilePosition();
                  await Fpos.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getAstNodeInfoByPosition_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Fpos != null && __isset.fpos)
          {
            field.Name = "fpos";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Fpos.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getAstNodeInfoByPositionArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.fpos == other.__isset.fpos) && ((!__isset.fpos) || (System.Object.Equals(Fpos, other.Fpos))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.fpos)
            hashcode = (hashcode * 397) + Fpos.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getAstNodeInfoByPosition_args(");
        bool __first = true;
        if (Fpos != null && __isset.fpos)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Fpos: ");
          sb.Append(Fpos== null ? "<null>" : Fpos.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getAstNodeInfoByPositionResult : TBase
    {
      private AstNodeInfo _success;
      private InvalidInput _ex;

      public AstNodeInfo Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidInput Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getAstNodeInfoByPositionResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new AstNodeInfo();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidInput();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getAstNodeInfoByPosition_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getAstNodeInfoByPositionResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getAstNodeInfoByPosition_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getSourceTextArgs : TBase
    {
      private string _astNodeId;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
      }

      public getSourceTextArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getSourceText_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getSourceTextArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getSourceText_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getSourceTextResult : TBase
    {
      private string _success;
      private InvalidId _ex;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getSourceTextResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getSourceText_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getSourceTextResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getSourceText_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDocumentationArgs : TBase
    {
      private string _astNodeId;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
      }

      public getDocumentationArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDocumentation_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDocumentationArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDocumentation_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDocumentationResult : TBase
    {
      private string _success;
      private InvalidId _ex;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getDocumentationResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDocumentation_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDocumentationResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDocumentation_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getPropertiesArgs : TBase
    {
      private string _astNodeIds;

      public string AstNodeIds
      {
        get
        {
          return _astNodeIds;
        }
        set
        {
          __isset.astNodeIds = true;
          this._astNodeIds = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeIds;
      }

      public getPropertiesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeIds = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getProperties_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeIds != null && __isset.astNodeIds)
          {
            field.Name = "astNodeIds";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeIds, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getPropertiesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeIds == other.__isset.astNodeIds) && ((!__isset.astNodeIds) || (System.Object.Equals(AstNodeIds, other.AstNodeIds))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeIds)
            hashcode = (hashcode * 397) + AstNodeIds.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getProperties_args(");
        bool __first = true;
        if (AstNodeIds != null && __isset.astNodeIds)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeIds: ");
          sb.Append(AstNodeIds);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getPropertiesResult : TBase
    {
      private Dictionary<string, string> _success;
      private InvalidId _ex;

      public Dictionary<string, string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getPropertiesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map8 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, string>(_map8.Count);
                    for(int _i9 = 0; _i9 < _map8.Count; ++_i9)
                    {
                      string _key10;
                      string _val11;
                      _key10 = await iprot.ReadStringAsync(cancellationToken);
                      _val11 = await iprot.ReadStringAsync(cancellationToken);
                      Success[_key10] = _val11;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getProperties_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Success.Count), cancellationToken);
                foreach (string _iter12 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter12, cancellationToken);
                  await oprot.WriteStringAsync(Success[_iter12], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getPropertiesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getProperties_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDiagramTypesArgs : TBase
    {
      private string _astNodeId;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
      }

      public getDiagramTypesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDiagramTypes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDiagramTypesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDiagramTypes_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDiagramTypesResult : TBase
    {
      private Dictionary<string, int> _success;
      private InvalidId _ex;

      public Dictionary<string, int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getDiagramTypesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map13 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, int>(_map13.Count);
                    for(int _i14 = 0; _i14 < _map13.Count; ++_i14)
                    {
                      string _key15;
                      int _val16;
                      _key15 = await iprot.ReadStringAsync(cancellationToken);
                      _val16 = await iprot.ReadI32Async(cancellationToken);
                      Success[_key15] = _val16;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDiagramTypes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Success.Count), cancellationToken);
                foreach (string _iter17 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter17, cancellationToken);
                  await oprot.WriteI32Async(Success[_iter17], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDiagramTypesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDiagramTypes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDiagramArgs : TBase
    {
      private string _astNodeId;
      private int _diagramId;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }

      public int DiagramId
      {
        get
        {
          return _diagramId;
        }
        set
        {
          __isset.diagramId = true;
          this._diagramId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
        public bool diagramId;
      }

      public getDiagramArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  DiagramId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDiagram_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.diagramId)
          {
            field.Name = "diagramId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(DiagramId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDiagramArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))))
          && ((__isset.diagramId == other.__isset.diagramId) && ((!__isset.diagramId) || (System.Object.Equals(DiagramId, other.DiagramId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
          if(__isset.diagramId)
            hashcode = (hashcode * 397) + DiagramId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDiagram_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        if (__isset.diagramId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("DiagramId: ");
          sb.Append(DiagramId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDiagramResult : TBase
    {
      private string _success;
      private InvalidId _exId;
      private Timeout _exLong;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId ExId
      {
        get
        {
          return _exId;
        }
        set
        {
          __isset.exId = true;
          this._exId = value;
        }
      }

      public Timeout ExLong
      {
        get
        {
          return _exLong;
        }
        set
        {
          __isset.exLong = true;
          this._exLong = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool exId;
        public bool exLong;
      }

      public getDiagramResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  ExId = new InvalidId();
                  await ExId.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  ExLong = new Timeout();
                  await ExLong.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDiagram_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.exId)
          {
            if (ExId != null)
            {
              field.Name = "ExId";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await ExId.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.exLong)
          {
            if (ExLong != null)
            {
              field.Name = "ExLong";
              field.Type = TType.Struct;
              field.ID = 2;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await ExLong.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDiagramResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.exId == other.__isset.exId) && ((!__isset.exId) || (System.Object.Equals(ExId, other.ExId))))
          && ((__isset.exLong == other.__isset.exLong) && ((!__isset.exLong) || (System.Object.Equals(ExLong, other.ExLong))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
          if(__isset.exId)
            hashcode = (hashcode * 397) + ExId.GetHashCode();
          if(__isset.exLong)
            hashcode = (hashcode * 397) + ExLong.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDiagram_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (ExId != null && __isset.exId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExId: ");
          sb.Append(ExId== null ? "<null>" : ExId.ToString());
        }
        if (ExLong != null && __isset.exLong)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExLong: ");
          sb.Append(ExLong== null ? "<null>" : ExLong.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDiagramLegendArgs : TBase
    {
      private int _diagramId;

      public int DiagramId
      {
        get
        {
          return _diagramId;
        }
        set
        {
          __isset.diagramId = true;
          this._diagramId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool diagramId;
      }

      public getDiagramLegendArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  DiagramId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDiagramLegend_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.diagramId)
          {
            field.Name = "diagramId";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(DiagramId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDiagramLegendArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.diagramId == other.__isset.diagramId) && ((!__isset.diagramId) || (System.Object.Equals(DiagramId, other.DiagramId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.diagramId)
            hashcode = (hashcode * 397) + DiagramId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDiagramLegend_args(");
        bool __first = true;
        if (__isset.diagramId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("DiagramId: ");
          sb.Append(DiagramId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getDiagramLegendResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getDiagramLegendResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getDiagramLegend_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getDiagramLegendResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getDiagramLegend_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileDiagramTypesArgs : TBase
    {
      private string _fileId;

      public string FileId
      {
        get
        {
          return _fileId;
        }
        set
        {
          __isset.fileId = true;
          this._fileId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool fileId;
      }

      public getFileDiagramTypesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  FileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileDiagramTypes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (FileId != null && __isset.fileId)
          {
            field.Name = "fileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileDiagramTypesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.fileId == other.__isset.fileId) && ((!__isset.fileId) || (System.Object.Equals(FileId, other.FileId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.fileId)
            hashcode = (hashcode * 397) + FileId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileDiagramTypes_args(");
        bool __first = true;
        if (FileId != null && __isset.fileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FileId: ");
          sb.Append(FileId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileDiagramTypesResult : TBase
    {
      private Dictionary<string, int> _success;
      private InvalidId _ex;

      public Dictionary<string, int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getFileDiagramTypesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map18 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, int>(_map18.Count);
                    for(int _i19 = 0; _i19 < _map18.Count; ++_i19)
                    {
                      string _key20;
                      int _val21;
                      _key20 = await iprot.ReadStringAsync(cancellationToken);
                      _val21 = await iprot.ReadI32Async(cancellationToken);
                      Success[_key20] = _val21;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileDiagramTypes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Success.Count), cancellationToken);
                foreach (string _iter22 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter22, cancellationToken);
                  await oprot.WriteI32Async(Success[_iter22], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileDiagramTypesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileDiagramTypes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileDiagramArgs : TBase
    {
      private string _fileId;
      private int _diagramId;

      public string FileId
      {
        get
        {
          return _fileId;
        }
        set
        {
          __isset.fileId = true;
          this._fileId = value;
        }
      }

      public int DiagramId
      {
        get
        {
          return _diagramId;
        }
        set
        {
          __isset.diagramId = true;
          this._diagramId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool fileId;
        public bool diagramId;
      }

      public getFileDiagramArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  FileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  DiagramId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileDiagram_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (FileId != null && __isset.fileId)
          {
            field.Name = "fileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.diagramId)
          {
            field.Name = "diagramId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(DiagramId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileDiagramArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.fileId == other.__isset.fileId) && ((!__isset.fileId) || (System.Object.Equals(FileId, other.FileId))))
          && ((__isset.diagramId == other.__isset.diagramId) && ((!__isset.diagramId) || (System.Object.Equals(DiagramId, other.DiagramId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.fileId)
            hashcode = (hashcode * 397) + FileId.GetHashCode();
          if(__isset.diagramId)
            hashcode = (hashcode * 397) + DiagramId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileDiagram_args(");
        bool __first = true;
        if (FileId != null && __isset.fileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FileId: ");
          sb.Append(FileId);
        }
        if (__isset.diagramId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("DiagramId: ");
          sb.Append(DiagramId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileDiagramResult : TBase
    {
      private string _success;
      private InvalidId _exId;
      private Timeout _exLong;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId ExId
      {
        get
        {
          return _exId;
        }
        set
        {
          __isset.exId = true;
          this._exId = value;
        }
      }

      public Timeout ExLong
      {
        get
        {
          return _exLong;
        }
        set
        {
          __isset.exLong = true;
          this._exLong = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool exId;
        public bool exLong;
      }

      public getFileDiagramResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  ExId = new InvalidId();
                  await ExId.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  ExLong = new Timeout();
                  await ExLong.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileDiagram_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.exId)
          {
            if (ExId != null)
            {
              field.Name = "ExId";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await ExId.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.exLong)
          {
            if (ExLong != null)
            {
              field.Name = "ExLong";
              field.Type = TType.Struct;
              field.ID = 2;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await ExLong.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileDiagramResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.exId == other.__isset.exId) && ((!__isset.exId) || (System.Object.Equals(ExId, other.ExId))))
          && ((__isset.exLong == other.__isset.exLong) && ((!__isset.exLong) || (System.Object.Equals(ExLong, other.ExLong))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
          if(__isset.exId)
            hashcode = (hashcode * 397) + ExId.GetHashCode();
          if(__isset.exLong)
            hashcode = (hashcode * 397) + ExLong.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileDiagram_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (ExId != null && __isset.exId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExId: ");
          sb.Append(ExId== null ? "<null>" : ExId.ToString());
        }
        if (ExLong != null && __isset.exLong)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ExLong: ");
          sb.Append(ExLong== null ? "<null>" : ExLong.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileDiagramLegendArgs : TBase
    {
      private int _diagramId;

      public int DiagramId
      {
        get
        {
          return _diagramId;
        }
        set
        {
          __isset.diagramId = true;
          this._diagramId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool diagramId;
      }

      public getFileDiagramLegendArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  DiagramId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileDiagramLegend_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.diagramId)
          {
            field.Name = "diagramId";
            field.Type = TType.I32;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(DiagramId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileDiagramLegendArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.diagramId == other.__isset.diagramId) && ((!__isset.diagramId) || (System.Object.Equals(DiagramId, other.DiagramId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.diagramId)
            hashcode = (hashcode * 397) + DiagramId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileDiagramLegend_args(");
        bool __first = true;
        if (__isset.diagramId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("DiagramId: ");
          sb.Append(DiagramId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileDiagramLegendResult : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getFileDiagramLegendResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String)
                {
                  Success = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileDiagramLegend_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await oprot.WriteStringAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileDiagramLegendResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileDiagramLegend_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferenceTypesArgs : TBase
    {
      private string _astNodeId;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
      }

      public getReferenceTypesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferenceTypes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferenceTypesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferenceTypes_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferenceTypesResult : TBase
    {
      private Dictionary<string, int> _success;
      private InvalidId _ex;

      public Dictionary<string, int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getReferenceTypesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map23 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, int>(_map23.Count);
                    for(int _i24 = 0; _i24 < _map23.Count; ++_i24)
                    {
                      string _key25;
                      int _val26;
                      _key25 = await iprot.ReadStringAsync(cancellationToken);
                      _val26 = await iprot.ReadI32Async(cancellationToken);
                      Success[_key25] = _val26;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferenceTypes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Success.Count), cancellationToken);
                foreach (string _iter27 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter27, cancellationToken);
                  await oprot.WriteI32Async(Success[_iter27], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferenceTypesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferenceTypes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferenceCountArgs : TBase
    {
      private string _astNodeId;
      private int _referenceId;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }

      public int ReferenceId
      {
        get
        {
          return _referenceId;
        }
        set
        {
          __isset.referenceId = true;
          this._referenceId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
        public bool referenceId;
      }

      public getReferenceCountArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ReferenceId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferenceCount_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.referenceId)
          {
            field.Name = "referenceId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ReferenceId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferenceCountArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))))
          && ((__isset.referenceId == other.__isset.referenceId) && ((!__isset.referenceId) || (System.Object.Equals(ReferenceId, other.ReferenceId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
          if(__isset.referenceId)
            hashcode = (hashcode * 397) + ReferenceId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferenceCount_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        if (__isset.referenceId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReferenceId: ");
          sb.Append(ReferenceId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferenceCountResult : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getReferenceCountResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferenceCount_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferenceCountResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferenceCount_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferencesArgs : TBase
    {
      private string _astNodeId;
      private int _referenceId;
      private List<string> _tags;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }

      public int ReferenceId
      {
        get
        {
          return _referenceId;
        }
        set
        {
          __isset.referenceId = true;
          this._referenceId = value;
        }
      }

      public List<string> Tags
      {
        get
        {
          return _tags;
        }
        set
        {
          __isset.tags = true;
          this._tags = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
        public bool referenceId;
        public bool tags;
      }

      public getReferencesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ReferenceId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.List)
                {
                  {
                    TList _list28 = await iprot.ReadListBeginAsync(cancellationToken);
                    Tags = new List<string>(_list28.Count);
                    for(int _i29 = 0; _i29 < _list28.Count; ++_i29)
                    {
                      string _elem30;
                      _elem30 = await iprot.ReadStringAsync(cancellationToken);
                      Tags.Add(_elem30);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferences_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.referenceId)
          {
            field.Name = "referenceId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ReferenceId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tags != null && __isset.tags)
          {
            field.Name = "tags";
            field.Type = TType.List;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tags.Count), cancellationToken);
              foreach (string _iter31 in Tags)
              {
                await oprot.WriteStringAsync(_iter31, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferencesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))))
          && ((__isset.referenceId == other.__isset.referenceId) && ((!__isset.referenceId) || (System.Object.Equals(ReferenceId, other.ReferenceId))))
          && ((__isset.tags == other.__isset.tags) && ((!__isset.tags) || (TCollections.Equals(Tags, other.Tags))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
          if(__isset.referenceId)
            hashcode = (hashcode * 397) + ReferenceId.GetHashCode();
          if(__isset.tags)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Tags);
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferences_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        if (__isset.referenceId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReferenceId: ");
          sb.Append(ReferenceId);
        }
        if (Tags != null && __isset.tags)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tags: ");
          sb.Append(Tags);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferencesResult : TBase
    {
      private List<AstNodeInfo> _success;
      private InvalidId _ex;

      public List<AstNodeInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getReferencesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<AstNodeInfo>(_list32.Count);
                    for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                    {
                      AstNodeInfo _elem34;
                      _elem34 = new AstNodeInfo();
                      await _elem34.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem34);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferences_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (AstNodeInfo _iter35 in Success)
                {
                  await _iter35.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferencesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferences_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferencesInFileArgs : TBase
    {
      private string _astNodeId;
      private int _referenceId;
      private string _fileId;
      private List<string> _tags;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }

      public int ReferenceId
      {
        get
        {
          return _referenceId;
        }
        set
        {
          __isset.referenceId = true;
          this._referenceId = value;
        }
      }

      public string FileId
      {
        get
        {
          return _fileId;
        }
        set
        {
          __isset.fileId = true;
          this._fileId = value;
        }
      }

      public List<string> Tags
      {
        get
        {
          return _tags;
        }
        set
        {
          __isset.tags = true;
          this._tags = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
        public bool referenceId;
        public bool fileId;
        public bool tags;
      }

      public getReferencesInFileArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ReferenceId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  FileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.List)
                {
                  {
                    TList _list36 = await iprot.ReadListBeginAsync(cancellationToken);
                    Tags = new List<string>(_list36.Count);
                    for(int _i37 = 0; _i37 < _list36.Count; ++_i37)
                    {
                      string _elem38;
                      _elem38 = await iprot.ReadStringAsync(cancellationToken);
                      Tags.Add(_elem38);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferencesInFile_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.referenceId)
          {
            field.Name = "referenceId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ReferenceId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FileId != null && __isset.fileId)
          {
            field.Name = "fileId";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Tags != null && __isset.tags)
          {
            field.Name = "tags";
            field.Type = TType.List;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.String, Tags.Count), cancellationToken);
              foreach (string _iter39 in Tags)
              {
                await oprot.WriteStringAsync(_iter39, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferencesInFileArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))))
          && ((__isset.referenceId == other.__isset.referenceId) && ((!__isset.referenceId) || (System.Object.Equals(ReferenceId, other.ReferenceId))))
          && ((__isset.fileId == other.__isset.fileId) && ((!__isset.fileId) || (System.Object.Equals(FileId, other.FileId))))
          && ((__isset.tags == other.__isset.tags) && ((!__isset.tags) || (TCollections.Equals(Tags, other.Tags))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
          if(__isset.referenceId)
            hashcode = (hashcode * 397) + ReferenceId.GetHashCode();
          if(__isset.fileId)
            hashcode = (hashcode * 397) + FileId.GetHashCode();
          if(__isset.tags)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Tags);
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferencesInFile_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        if (__isset.referenceId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReferenceId: ");
          sb.Append(ReferenceId);
        }
        if (FileId != null && __isset.fileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FileId: ");
          sb.Append(FileId);
        }
        if (Tags != null && __isset.tags)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Tags: ");
          sb.Append(Tags);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferencesInFileResult : TBase
    {
      private List<AstNodeInfo> _success;
      private InvalidId _ex;

      public List<AstNodeInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getReferencesInFileResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list40 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<AstNodeInfo>(_list40.Count);
                    for(int _i41 = 0; _i41 < _list40.Count; ++_i41)
                    {
                      AstNodeInfo _elem42;
                      _elem42 = new AstNodeInfo();
                      await _elem42.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem42);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferencesInFile_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (AstNodeInfo _iter43 in Success)
                {
                  await _iter43.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferencesInFileResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferencesInFile_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferencesPageArgs : TBase
    {
      private string _astNodeId;
      private int _referenceId;
      private int _pageSize;
      private int _pageNo;

      public string AstNodeId
      {
        get
        {
          return _astNodeId;
        }
        set
        {
          __isset.astNodeId = true;
          this._astNodeId = value;
        }
      }

      public int ReferenceId
      {
        get
        {
          return _referenceId;
        }
        set
        {
          __isset.referenceId = true;
          this._referenceId = value;
        }
      }

      public int PageSize
      {
        get
        {
          return _pageSize;
        }
        set
        {
          __isset.pageSize = true;
          this._pageSize = value;
        }
      }

      public int PageNo
      {
        get
        {
          return _pageNo;
        }
        set
        {
          __isset.pageNo = true;
          this._pageNo = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool astNodeId;
        public bool referenceId;
        public bool pageSize;
        public bool pageNo;
      }

      public getReferencesPageArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  AstNodeId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ReferenceId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  PageSize = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I32)
                {
                  PageNo = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferencesPage_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (AstNodeId != null && __isset.astNodeId)
          {
            field.Name = "astNodeId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(AstNodeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.referenceId)
          {
            field.Name = "referenceId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ReferenceId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.pageSize)
          {
            field.Name = "pageSize";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(PageSize, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.pageNo)
          {
            field.Name = "pageNo";
            field.Type = TType.I32;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(PageNo, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferencesPageArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.astNodeId == other.__isset.astNodeId) && ((!__isset.astNodeId) || (System.Object.Equals(AstNodeId, other.AstNodeId))))
          && ((__isset.referenceId == other.__isset.referenceId) && ((!__isset.referenceId) || (System.Object.Equals(ReferenceId, other.ReferenceId))))
          && ((__isset.pageSize == other.__isset.pageSize) && ((!__isset.pageSize) || (System.Object.Equals(PageSize, other.PageSize))))
          && ((__isset.pageNo == other.__isset.pageNo) && ((!__isset.pageNo) || (System.Object.Equals(PageNo, other.PageNo))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.astNodeId)
            hashcode = (hashcode * 397) + AstNodeId.GetHashCode();
          if(__isset.referenceId)
            hashcode = (hashcode * 397) + ReferenceId.GetHashCode();
          if(__isset.pageSize)
            hashcode = (hashcode * 397) + PageSize.GetHashCode();
          if(__isset.pageNo)
            hashcode = (hashcode * 397) + PageNo.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferencesPage_args(");
        bool __first = true;
        if (AstNodeId != null && __isset.astNodeId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("AstNodeId: ");
          sb.Append(AstNodeId);
        }
        if (__isset.referenceId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReferenceId: ");
          sb.Append(ReferenceId);
        }
        if (__isset.pageSize)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PageSize: ");
          sb.Append(PageSize);
        }
        if (__isset.pageNo)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("PageNo: ");
          sb.Append(PageNo);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getReferencesPageResult : TBase
    {
      private List<AstNodeInfo> _success;
      private InvalidId _ex;

      public List<AstNodeInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getReferencesPageResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list44 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<AstNodeInfo>(_list44.Count);
                    for(int _i45 = 0; _i45 < _list44.Count; ++_i45)
                    {
                      AstNodeInfo _elem46;
                      _elem46 = new AstNodeInfo();
                      await _elem46.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem46);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getReferencesPage_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (AstNodeInfo _iter47 in Success)
                {
                  await _iter47.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getReferencesPageResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getReferencesPage_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileReferenceTypesArgs : TBase
    {
      private string _fileId;

      public string FileId
      {
        get
        {
          return _fileId;
        }
        set
        {
          __isset.fileId = true;
          this._fileId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool fileId;
      }

      public getFileReferenceTypesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  FileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileReferenceTypes_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (FileId != null && __isset.fileId)
          {
            field.Name = "fileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileReferenceTypesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.fileId == other.__isset.fileId) && ((!__isset.fileId) || (System.Object.Equals(FileId, other.FileId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.fileId)
            hashcode = (hashcode * 397) + FileId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileReferenceTypes_args(");
        bool __first = true;
        if (FileId != null && __isset.fileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FileId: ");
          sb.Append(FileId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileReferenceTypesResult : TBase
    {
      private Dictionary<string, int> _success;
      private InvalidId _ex;

      public Dictionary<string, int> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getFileReferenceTypesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map48 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, int>(_map48.Count);
                    for(int _i49 = 0; _i49 < _map48.Count; ++_i49)
                    {
                      string _key50;
                      int _val51;
                      _key50 = await iprot.ReadStringAsync(cancellationToken);
                      _val51 = await iprot.ReadI32Async(cancellationToken);
                      Success[_key50] = _val51;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileReferenceTypes_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Map;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.I32, Success.Count), cancellationToken);
                foreach (string _iter52 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter52, cancellationToken);
                  await oprot.WriteI32Async(Success[_iter52], cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileReferenceTypesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileReferenceTypes_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileReferencesArgs : TBase
    {
      private string _fileId;
      private int _referenceId;

      public string FileId
      {
        get
        {
          return _fileId;
        }
        set
        {
          __isset.fileId = true;
          this._fileId = value;
        }
      }

      public int ReferenceId
      {
        get
        {
          return _referenceId;
        }
        set
        {
          __isset.referenceId = true;
          this._referenceId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool fileId;
        public bool referenceId;
      }

      public getFileReferencesArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  FileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ReferenceId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileReferences_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (FileId != null && __isset.fileId)
          {
            field.Name = "fileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.referenceId)
          {
            field.Name = "referenceId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ReferenceId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileReferencesArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.fileId == other.__isset.fileId) && ((!__isset.fileId) || (System.Object.Equals(FileId, other.FileId))))
          && ((__isset.referenceId == other.__isset.referenceId) && ((!__isset.referenceId) || (System.Object.Equals(ReferenceId, other.ReferenceId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.fileId)
            hashcode = (hashcode * 397) + FileId.GetHashCode();
          if(__isset.referenceId)
            hashcode = (hashcode * 397) + ReferenceId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileReferences_args(");
        bool __first = true;
        if (FileId != null && __isset.fileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FileId: ");
          sb.Append(FileId);
        }
        if (__isset.referenceId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReferenceId: ");
          sb.Append(ReferenceId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileReferencesResult : TBase
    {
      private List<AstNodeInfo> _success;
      private InvalidId _ex;

      public List<AstNodeInfo> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getFileReferencesResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list53 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<AstNodeInfo>(_list53.Count);
                    for(int _i54 = 0; _i54 < _list53.Count; ++_i54)
                    {
                      AstNodeInfo _elem55;
                      _elem55 = new AstNodeInfo();
                      await _elem55.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem55);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileReferences_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (AstNodeInfo _iter56 in Success)
                {
                  await _iter56.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileReferencesResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileReferences_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileReferenceCountArgs : TBase
    {
      private string _fileId;
      private int _referenceId;

      public string FileId
      {
        get
        {
          return _fileId;
        }
        set
        {
          __isset.fileId = true;
          this._fileId = value;
        }
      }

      public int ReferenceId
      {
        get
        {
          return _referenceId;
        }
        set
        {
          __isset.referenceId = true;
          this._referenceId = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool fileId;
        public bool referenceId;
      }

      public getFileReferenceCountArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  FileId = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  ReferenceId = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileReferenceCount_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (FileId != null && __isset.fileId)
          {
            field.Name = "fileId";
            field.Type = TType.String;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteStringAsync(FileId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.referenceId)
          {
            field.Name = "referenceId";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(ReferenceId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileReferenceCountArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.fileId == other.__isset.fileId) && ((!__isset.fileId) || (System.Object.Equals(FileId, other.FileId))))
          && ((__isset.referenceId == other.__isset.referenceId) && ((!__isset.referenceId) || (System.Object.Equals(ReferenceId, other.ReferenceId))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.fileId)
            hashcode = (hashcode * 397) + FileId.GetHashCode();
          if(__isset.referenceId)
            hashcode = (hashcode * 397) + ReferenceId.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileReferenceCount_args(");
        bool __first = true;
        if (FileId != null && __isset.fileId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FileId: ");
          sb.Append(FileId);
        }
        if (__isset.referenceId)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ReferenceId: ");
          sb.Append(ReferenceId);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getFileReferenceCountResult : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getFileReferenceCountResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32)
                {
                  Success = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getFileReferenceCount_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getFileReferenceCountResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getFileReferenceCount_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getSyntaxHighlightArgs : TBase
    {
      private FileRange _range;

      public FileRange Range
      {
        get
        {
          return _range;
        }
        set
        {
          __isset.range = true;
          this._range = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool range;
      }

      public getSyntaxHighlightArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Range = new FileRange();
                  await Range.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getSyntaxHighlight_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (Range != null && __isset.range)
          {
            field.Name = "range";
            field.Type = TType.Struct;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Range.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getSyntaxHighlightArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.range == other.__isset.range) && ((!__isset.range) || (System.Object.Equals(Range, other.Range))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.range)
            hashcode = (hashcode * 397) + Range.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getSyntaxHighlight_args(");
        bool __first = true;
        if (Range != null && __isset.range)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Range: ");
          sb.Append(Range== null ? "<null>" : Range.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getSyntaxHighlightResult : TBase
    {
      private List<SyntaxHighlight> _success;
      private InvalidId _ex;

      public List<SyntaxHighlight> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public InvalidId Ex
      {
        get
        {
          return _ex;
        }
        set
        {
          __isset.ex = true;
          this._ex = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool ex;
      }

      public getSyntaxHighlightResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list57 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<SyntaxHighlight>(_list57.Count);
                    for(int _i58 = 0; _i58 < _list57.Count; ++_i58)
                    {
                      SyntaxHighlight _elem59;
                      _elem59 = new SyntaxHighlight();
                      await _elem59.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem59);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  Ex = new InvalidId();
                  await Ex.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getSyntaxHighlight_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (SyntaxHighlight _iter60 in Success)
                {
                  await _iter60.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.ex)
          {
            if (Ex != null)
            {
              field.Name = "Ex";
              field.Type = TType.Struct;
              field.ID = 1;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Ex.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getSyntaxHighlightResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.ex == other.__isset.ex) && ((!__isset.ex) || (System.Object.Equals(Ex, other.Ex))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
          if(__isset.ex)
            hashcode = (hashcode * 397) + Ex.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getSyntaxHighlight_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        if (Ex != null && __isset.ex)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Ex: ");
          sb.Append(Ex== null ? "<null>" : Ex.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }

  }
}
