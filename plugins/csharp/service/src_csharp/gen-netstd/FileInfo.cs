/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class FileInfo : TBase
{
  private string _id;
  private string _name;
  private string _type;
  private string _path;
  private string _parent;
  private bool _hasChildren;
  private bool _isDirectory;
  private FileParseStatus _parseStatus;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public string Path
  {
    get
    {
      return _path;
    }
    set
    {
      __isset.path = true;
      this._path = value;
    }
  }

  public string Parent
  {
    get
    {
      return _parent;
    }
    set
    {
      __isset.parent = true;
      this._parent = value;
    }
  }

  public bool HasChildren
  {
    get
    {
      return _hasChildren;
    }
    set
    {
      __isset.hasChildren = true;
      this._hasChildren = value;
    }
  }

  public bool IsDirectory
  {
    get
    {
      return _isDirectory;
    }
    set
    {
      __isset.isDirectory = true;
      this._isDirectory = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="FileParseStatus"/>
  /// </summary>
  public FileParseStatus ParseStatus
  {
    get
    {
      return _parseStatus;
    }
    set
    {
      __isset.parseStatus = true;
      this._parseStatus = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool id;
    public bool name;
    public bool type;
    public bool path;
    public bool parent;
    public bool hasChildren;
    public bool isDirectory;
    public bool parseStatus;
  }

  public FileInfo()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Id = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Type = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Path = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Parent = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.Bool)
            {
              HasChildren = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.Bool)
            {
              IsDirectory = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I32)
            {
              ParseStatus = (FileParseStatus)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("FileInfo");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Id != null && __isset.id)
      {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Name != null && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Type != null && __isset.type)
      {
        field.Name = "type";
        field.Type = TType.String;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Path != null && __isset.path)
      {
        field.Name = "path";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Path, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Parent != null && __isset.parent)
      {
        field.Name = "parent";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Parent, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.hasChildren)
      {
        field.Name = "hasChildren";
        field.Type = TType.Bool;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(HasChildren, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.isDirectory)
      {
        field.Name = "isDirectory";
        field.Type = TType.Bool;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBoolAsync(IsDirectory, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.parseStatus)
      {
        field.Name = "parseStatus";
        field.Type = TType.I32;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)ParseStatus, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as FileInfo;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
      && ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.type == other.__isset.type) && ((!__isset.type) || (System.Object.Equals(Type, other.Type))))
      && ((__isset.path == other.__isset.path) && ((!__isset.path) || (System.Object.Equals(Path, other.Path))))
      && ((__isset.parent == other.__isset.parent) && ((!__isset.parent) || (System.Object.Equals(Parent, other.Parent))))
      && ((__isset.hasChildren == other.__isset.hasChildren) && ((!__isset.hasChildren) || (System.Object.Equals(HasChildren, other.HasChildren))))
      && ((__isset.isDirectory == other.__isset.isDirectory) && ((!__isset.isDirectory) || (System.Object.Equals(IsDirectory, other.IsDirectory))))
      && ((__isset.parseStatus == other.__isset.parseStatus) && ((!__isset.parseStatus) || (System.Object.Equals(ParseStatus, other.ParseStatus))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.id)
        hashcode = (hashcode * 397) + Id.GetHashCode();
      if(__isset.name)
        hashcode = (hashcode * 397) + Name.GetHashCode();
      if(__isset.type)
        hashcode = (hashcode * 397) + Type.GetHashCode();
      if(__isset.path)
        hashcode = (hashcode * 397) + Path.GetHashCode();
      if(__isset.parent)
        hashcode = (hashcode * 397) + Parent.GetHashCode();
      if(__isset.hasChildren)
        hashcode = (hashcode * 397) + HasChildren.GetHashCode();
      if(__isset.isDirectory)
        hashcode = (hashcode * 397) + IsDirectory.GetHashCode();
      if(__isset.parseStatus)
        hashcode = (hashcode * 397) + ParseStatus.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("FileInfo(");
    bool __first = true;
    if (Id != null && __isset.id)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Id: ");
      sb.Append(Id);
    }
    if (Name != null && __isset.name)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Name: ");
      sb.Append(Name);
    }
    if (Type != null && __isset.type)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Type: ");
      sb.Append(Type);
    }
    if (Path != null && __isset.path)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Path: ");
      sb.Append(Path);
    }
    if (Parent != null && __isset.parent)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Parent: ");
      sb.Append(Parent);
    }
    if (__isset.hasChildren)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("HasChildren: ");
      sb.Append(HasChildren);
    }
    if (__isset.isDirectory)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("IsDirectory: ");
      sb.Append(IsDirectory);
    }
    if (__isset.parseStatus)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("ParseStatus: ");
      sb.Append(ParseStatus);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

