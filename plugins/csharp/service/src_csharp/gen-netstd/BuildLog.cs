/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



public partial class BuildLog : TBase
{
  private string _message;
  private MessageType _messageType;
  private Range _range;

  public string Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="MessageType"/>
  /// </summary>
  public MessageType MessageType
  {
    get
    {
      return _messageType;
    }
    set
    {
      __isset.messageType = true;
      this._messageType = value;
    }
  }

  public Range Range
  {
    get
    {
      return _range;
    }
    set
    {
      __isset.range = true;
      this._range = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool message;
    public bool messageType;
    public bool range;
  }

  public BuildLog()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Message = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              MessageType = (MessageType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Struct)
            {
              Range = new Range();
              await Range.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("BuildLog");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Message != null && __isset.message)
      {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Message, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.messageType)
      {
        field.Name = "messageType";
        field.Type = TType.I32;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)MessageType, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Range != null && __isset.range)
      {
        field.Name = "range";
        field.Type = TType.Struct;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Range.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as BuildLog;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.message == other.__isset.message) && ((!__isset.message) || (System.Object.Equals(Message, other.Message))))
      && ((__isset.messageType == other.__isset.messageType) && ((!__isset.messageType) || (System.Object.Equals(MessageType, other.MessageType))))
      && ((__isset.range == other.__isset.range) && ((!__isset.range) || (System.Object.Equals(Range, other.Range))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.message)
        hashcode = (hashcode * 397) + Message.GetHashCode();
      if(__isset.messageType)
        hashcode = (hashcode * 397) + MessageType.GetHashCode();
      if(__isset.range)
        hashcode = (hashcode * 397) + Range.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("BuildLog(");
    bool __first = true;
    if (Message != null && __isset.message)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Message: ");
      sb.Append(Message);
    }
    if (__isset.messageType)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("MessageType: ");
      sb.Append(MessageType);
    }
    if (Range != null && __isset.range)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Range: ");
      sb.Append(Range== null ? "<null>" : Range.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

