#ifndef CC_SERVICE_CPPREPARSESERVICE_TYPESPECIALMEMBERS_H
#define CC_SERVICE_CPPREPARSESERVICE_TYPESPECIALMEMBERS_H

#include <functional>
#include <map>
#include <memory>
#include <string>
#include <vector>

#include <boost/optional.hpp>

#include <odb/database.hxx>

#include <clang/Frontend/ASTUnit.h>

#include <model/cppastnode.h>
#include <model/file.h>
#include <model/fileloc.h>
#include <model/position.h>

#include <util/odbtransaction.h>

// Required for the Thrift objects, such as core::FileId.
#include "cppreparse_types.h"

namespace cc
{
namespace service
{

namespace reparse
{
class CppReparser;
} // namespace reparse

namespace language
{

/**
 * Offers a way to pretty-print the special members ([special]) of a C++ type.
 * Special members can be implicitly generated by the compiler - for these
 * functions, their implementation is translated into source code.
 */
class TypeSpecialMemberPrinter
{
public:
  /**
   * Function type specifier for the functor that is used to emulate "Jump to
   * definition" from a special member's forward declaration to its definition
   * body.
   */
  typedef std::function<model::FileLoc (
    const std::string& filePath_,
    const model::Range& range_)> DefinitionSearchFunction;

  TypeSpecialMemberPrinter(odb::database& db_,
                           reparse::CppReparser& reparser_,
                           const DefinitionSearchFunction& defSearch_);

  std::vector<SourceTextFragment>
  resolveMembersFor(const model::CppAstNodePtr astNode_);

private:
  std::string getFileSubstring(const std::string& filePath_,
                               const model::Range& range_);

  odb::database& _db;
  util::OdbTransaction _transaction;
  reparse::CppReparser& _reparser;
  const DefinitionSearchFunction& _definitionSearch;

  /**
   * Contains a file path to lines of source text mapping. This cache is used
   * to speed up the composition of function bodies that are explicitly written
   * as source code.
   */
  // In most real-world applications, this will only contain one or two source
  // files only.
  std::map<std::string, std::vector<std::string>> _fileCache;
  /**
   * Maps file paths in the database to the files' ID.
   */
  std::map<std::string, std::string> _fileIds;
};

} //namespace language
} //namespace service
} //namespace cc

#endif // CC_SERVICE_CPPREPARSESERVICE_TYPESPECIALMEMBERS_H
